#Michael Higley mwh180000
#Dillon Carter	dwc180002
#Three in a row game project made for CS 2340 with Nhut Nguyen
#Registers Used:
#S Registers: s0: Stores 2d Array of board, s1: Stores size of row, s2: Stores size of column, s3: Stores data size, s4: Current Player
#T Registers: t0: Stores inputted column
#
.data
	#All ASCIIZ values
	newLine:	.asciiz "\n"
	horizontalLine: .asciiz "______"
	verticalLine:	.asciiz "|"
	userWin: 	.asciiz "Congratulations, you won the game!"
	computerWin: 	.asciiz "You lost to the computer!"
	gameTie: 	.asciiz "The game has tied."
	movePrompt: 	.asciiz "It is your turn"
	computerTurn: 	.asciiz "The CPU has moved"
	inputPosition: 	.asciiz "Enter a number 1-3 for your move"
	invalidMove: 	.asciiz "That is not a valid column."
	columnFull: 	.asciiz "That column is full now"
	gameExplain: 	.asciiz "This game is called Three in a row. The goal is to get three of your pieces to line up vertically, horizontally, or diagonally. The board is 3x6 and you are up against a CPU. Have fun!."
	stateEmpty:	.asciiz "E"
	stateRed:	.asciiz "R"
	stateBlack:	.asciiz "B"
	
	#Word values
	boardState: 	.word 0,0,0 #Stores the state of each position in the board, 0 for empty, 1 for Play1, 2 for Play 2
		    	.word 2,1,1
		    	.word 1,1,2
		    	.word 2,2,1
		    	.word 1,1,2
		    	.word 2,1,2
		   
	rowSize:   	.word 3
	columnSize:	.word 6
	dataSize:	.word 4	
	userInput:	.word 0	
.text
main:
	li $v0, 4
	la $a0, newLine
	syscall
	
	li $v0, 4 #Loading 4 for output
	la $a0, gameExplain #Print the explanation
	syscall
	#Initialize the board
	la $s0, boardState   #load base address of 2D array into register
    	lw $s1, rowSize
    	lw $s2, columnSize
    	lw $s3, dataSize
    	
    	
#--------------------------------------------------------------------------------------------------------------------------------------
#LOOP THROUGH EACH GAME TICK
#--------------------------------------------------------------------------------------------------------------------------------------
loop: #Start of the input loop
	
	jal displayBoard #Display the current board
	
	li $v0, 4
	la $a0, newLine
	syscall
	
	la $a0, inputPosition
	syscall 

	li $v0, 5 #Getting ready for user input
	syscall
	
	
	move $t0, $v0 #Moves input to the temp register 0 
	jal isValid #Testing if the move is valid
	addi $t0, $t0, -1
	sw $t0, userInput
	
	li $s4, 1
	jal gravityCheck
	
	jal displayBoard #Display the current board
	
	jal checkWinState
	
	j loop
	
#--------------------------------------------------------------------------------------------------------------------------------------
#CHECK FOR VALID MOVE
#--------------------------------------------------------------------------------------------------------------------------------------
isValid: #Tests if the move is invalid
	blt $t0, 1, invalid
	bgt  $t0, 3, invalid

valid: #If the move is valid
	jr $ra

invalid: #If the move is invalid
	li $v0, 4
	la $a0, invalidMove
	syscall
	j loop

#--------------------------------------------------------------------------------------------------------------------------------------
#DISPLAY THE BOARD
#--------------------------------------------------------------------------------------------------------------------------------------
displayBoard: #Takes the content of each position and displays the content whether it is red, black, or empty as R, B, or E
	la $s0, boardState
	move $t6, $0
	move $t7, $0
	sw $ra, 0($sp)
	jal boardLoop
	lw $ra, 0($sp)
	jr $ra
	
boardLoop:    #Loops through a set amount of displays for each line of the 
	li $v0, 4	#Immediatly creates a new line
	la $a0, newLine
	syscall
	move $t7, $zero
	
	#Check current position in the board
	div $t1, $t6, 2
	mfhi $t1
	beq $t1, 1, innerLoop #Check if the remainder is equal to 1 if not, output a horizontal line
	li $v0, 4
	la $a0, horizontalLine
	syscall
	add $t6, $t6, 1 #Increment the index by 1
	blt $t6, 12, boardLoop #Compare index to total, branch back if less than

	jr $ra
	
innerLoopFinal:
	bge $t7, 3, boardLoop
	add $t6, $t6, 1 #Increment the index by 1
	lw $t2, ($s0) #Load the current value of the board state into t2
	beq $t2, 0, displayEmpty
	beq $t2, 1, displayRed
	j displayBlack
	
innerLoop:
	bge $t7, 2, innerLoopFinal
	lw $t2, ($s0) #Load the current value of the board state into t2
	beq $t2, 0, displayEmpty
	beq $t2, 1, displayRed
	j displayBlack
	
	
displayEmpty: #Displays empty board state
	li $v0, 4
	la $a0, stateEmpty
	syscall
	add $t7, $t7, 1 #Increment the inner loop index pointer
	add $s0, $s0, 4 #Increment the array by word size
	li $v0, 4	#Print out a vertical line to seperate columns
	la $a0, verticalLine
	syscall
	j innerLoop

displayRed: #Displays Red player board state
	li $v0, 4
	la $a0, stateRed
	syscall
	add $t7, $t7, 1 #Increment the inner loop index pointer
	add $s0, $s0, 4 #Increment the array by word size
	li $v0, 4	#Print out a vertical line to seperate columns
	la $a0, verticalLine
	syscall
	j innerLoop
	
displayBlack: #Displays Black player board state
	li $v0, 4
	la $a0, stateBlack
	syscall
	add $t7, $t7, 1 #Increment the inner loop index pointer
	add $s0, $s0, 4 #Increment the array by word size
	li $v0, 4	#Print out a vertical line to seperate columns
	la $a0, verticalLine
	syscall
	j innerLoop


#--------------------------------------------------------------------------------------------------------------------------------------
#MOVE VALUE TO BOTTOM OF BOARD
#--------------------------------------------------------------------------------------------------------------------------------------
gravityCheck: #Checks if the columns are filled, resulting address is in $t4
	#t0 is user input, $t9 is baseArrayAddress
	#address = baseArrayAddress + (rowIndex * columnSize + colIndex) * dataSize
	#address = boardstate + (userInput * 6 + 0) * 4
	la $s0, boardState #Sets $s0 to baseArrayAddress
	li $t1, 0 #$t1 is colIndex
	#Go to the first index of the chosen column
	li $v0, 1
	la $a0, ($t0)
	syscall
	
	
	mult $t1, $s2 #rowIndex * columnSize
	mflo $t2 #Result in $t2
	add $t3, $t2, $t0 #(rowIndex * columnSize)($t2) + colIndex($t0))
	mult $t3, $s3 # * datasize
	mflo $t3 #Stored in $t4
	add $s0, $t3, $s0 #Stores baseArrayAddress + (rowIndex * columnSize + colIndex)
	lw $t4, 0($s0) #Gets the value at the address $t4 stored in $t6
	#At t4, the value of the first column given is stored, check this against 0, if not 0 end loop and give error, otherwise, continue down until end of table reached
	bgt $t4, $0, invalid #If the first value is filled, its an invalid move
	j gravityLoop
	
	gravityLoop:
		move $t9, $s0		#Move the address of the board into t9
		addi $s0, $s0, 12	#Increment the address of the board to the next row
		lw $t4, 0($s0)		#Get the value out of the current index
		bgt $t4, 0, gravityEnd	#Check the value in t4, if it is greater than 0, then the previous value will be filled
		beq $t7, 6, gravityEnd	#Check the loop counter, if it is equal to six, exit the loop
		addi $t7, $t7, 1	#Increment the loop counter
		j gravityLoop		#Jump back to top of loop counter
	
	gravityEnd:
		beq $t7, 6, inputEnd	#Check if end of gravity reached, if so, inputed into end of filed
		beq $s4, 1, enterPlayer	#If the value in s4 is zero, that is the player
		j enterAI		#Otherwise it is the AI
		
	inputEnd:
		li $t1, 5		#Make row Index 5
		mult $t1, $s2 		#rowIndex * columnSize
		mflo $t2 		#Result in $t2
		add $t3, $t2, $t1 	#(rowIndex * columnSize)($t2) + colIndex($t1))
		mult $t3, $s3 		# * datasize
		mflo $t3 		#Stored in $t4
		add $s0, $t3, $s0 	#Stores baseArrayAddress + (rowIndex * columnSize + colIndex)
		move $t9, $s0
		beq $s4, 1, enterPlayer
		j enterAI
		
	enterAI:
		li $t1, 2
		sw $t1, 0($t9)
		jr $ra
	
	enterPlayer:
		li $t1, 1
		sw $t1, 0($t9)
		jr $ra
		
#--------------------------------------------------------------------------------------------------------------------------------------
#CHECK WIN STATE
#--------------------------------------------------------------------------------------------------------------------------------------
checkWinState:
    checkWin:
    	la $s0, boardState
    	li $t1, 0	#Row Index
    	checkHorizontalSetup: #Sets the col index to 0 and row index to 0
    		li $t0, 0	#Column Index
    		li $t3, 0	#Number of same in checking
    		li $t4, 3	#Number of values to win
    		
    	checkHorizontalLoop: #Goes through each row, if all three are the same as the current player, then current move won
    		lw $t2, ($s0)	#Get the value at the index
    		bne $t2, $s4, checkHorizontalIncrement
    		addi $t3, $t3, 1
    		beq $t4, $t3, winner
    		addi $s0, $s0, 4
    		j checkHorizontalLoop
    		
    	checkHorizontalIncrement: #Increments the row to check
    		beq $t1, $s2, checkVertical
    		addi $t1, $t1, 1
    		la $s0, boardState
    		mult $t1, $s2
    		mflo $t5
    		add $t5, $t5, $t0
    		mult $t5, $s3
    		mflo $t5
    		add $s0, $t5, $s0
    		j checkHorizontalSetup
    	
    	checkVertical:
    		la $s0, boardState
    		li $t0, 0	#Row Index
    		
    	checkVerticalSetup:
    		lw $t1, userInput	#Get inputted Column Index
    		li $t3, 0	#Number of same values in column
    		li $t4, 3	#Number of values to win
    		mult $t1, $s2 #rowIndex * columnSize
		mflo $t5 #Result in $t2
		add $t5, $t5, $t0 #(rowIndex * columnSize)($t2) + colIndex($t0))
		mult $t5, $s3 # * datasize
		mflo $t5 #Stored in $t4
		add $s0, $t5, $s0 #Stores baseArrayAddress + (rowIndex * columnSize + colIndex)
    		
    	checkVerticalLoop: #Goes through the column and the two rows below it to check for a win
    		lw $t2, ($s0) #Get value at index
    		bne $t2, $s4, checkDiagonal
    		addi $t3, $t3, 1
    		beq $t3, $t4, winner
    		addi $s0, $s0, 12
    		j checkVerticalLoop
    	
    	checkDiagonal:
    		li $t3, 0
    		li $t0, 0
    		li $t1, 0
    		topLeftCheck:
        		addi $t0, $t0, 1
        		subi $t1, $t1, 1
        		bge	$t0, $s1, topLeftCheckEnd	# if $t0 >= $t1 then target
        		blt $t1, $zero, topLeftCheckEnd

        		# address of element == base address (label) + (rowIndex * colSize + colIndex) * dataSize
       			mul $t5, $t0, $s2   #   $a0 = rowIndex * columnSize
        		add $t5, $t5, $t1   #   $a0 += columnIndex
        		mul $t5, $t5, $s3   #   $a0 *= DATA_SIZE
			add $t5, $t5, $s0   #   $a0 += base address
        		# $t5 now has address of the element at rowIndex $t0 and columnIndex $t1

        	lw $t5, ($t5)
        	bne $t5, $a2, topLeftCheckEnd # if player at address != given player, then exit loop
		addi $t3, $t3, 1 # increment same in a row count
		beq $t3, $t4, winner	# if same in a row count == win amount, then win

		j topLeftCheck

    		topLeftCheckEnd:
		li $t0, 0 # $a0 == $t0 == rowIndex
    		li $t1, 0 # $a1 == $t1 == columnIndex 
    		# $a2 == which player to check win for, 1 == playerOne, 2 == playerTwo
		li $t3, 0
		
    		bottomRightCheck:
        	subi $t0, $t0, 1
        	addi $t1, $t1, 1
        	blt $t0, $zero, bottomRightCheckEnd
        	bge $t1, $s2, bottomRightCheckEnd

        	# address of element == base address (label) + (rowIndex * colSize + colIndex) * dataSize
        	mul $t5, $t0, $s2   #   $a0 = rowIndex * columnSize
        	add $t5, $t5, $t1   #   $a0 += columnIndex
        	mul $t5, $t5, $s3   #   $a0 *= DATA_SIZE
        	add $t5, $t5, $s0   #   $a0 += base address
        	# $t5 now has address of the element at rowIndex $t0 and columnIndex $t1

        	lw $t5, ($t5)
        	bne $t5, $a2, bottomRightCheckEnd # if player at address != given player, then exit loop
        	addi $t3, $t3, 1 # increment same in a row count
        	beq	$t3, $t4, winner	# if same in a row count == win amount, then win

        	j bottomRightCheck


    		bottomRightCheckEnd:
    		move $t0, $a0 # $a0 == $t0 == rowIndex
    		move $t1, $a1 # $a1 == $t1 == columnIndex 
    		li $t3, 1 # same in a row count
    		# $a2 == which player to check win for, 1 == playerOne, 2 == playerTwo

    		## TOP RIGHT TO BOTTOM LEFT
    		topRightCheck:
        		addi $t0, $t0, 1
       			addi $t1, $t1, 1
			bge	$t0, $s1, topRightCheckEnd	# if $t0 >= $t1 then target
        		bge $t1, $s2, topRightCheckEnd

        		# address of element == base address (label) + (rowIndex * colSize + colIndex) * dataSize
        		mul $t5, $t0, $s2   #   $a0 = rowIndex * columnSize
			add $t5, $t5, $t1   #   $a0 += columnIndex
			mul $t5, $t5, $s3   #   $a0 *= DATA_SIZE
        		add $t5, $t5, $s0   #   $a0 += base address
        		# $t5 now has address of the element at rowIndex $t0 and columnIndex $t1

        		lw $t5, ($t5)
        		bne $t5, $a2, topRightCheckEnd # if player at address != given player, then exit loop
        		addi $t3, $t3, 1 # increment same in a row count
        		beq $t3, $t4, winner	# if same in a row count == win amount, then win

        		j topRightCheck

    		topRightCheckEnd:
    			move $t0, $a0 # $a0 == $t0 == rowIndex
    			move $t1, $a1 # $a1 == $t1 == columnIndex 
    			# $a2 == which player to check win for, 1 == playerOne, 2 == playerTwo

    		bottomLeftCheck:
        		subi $t0, $t0, 1
        		subi $t1, $t1, 1
        		blt $t0, $zero, bottomLeftCheckEnd
        		blt $t1, $zero, bottomLeftCheckEnd

        		# address of element == base address (label) + (rowIndex * colSize + colIndex) * dataSize
        		mul $t5, $t0, $s2   #   $a0 = rowIndex * columnSize
        		add $t5, $t5, $t1   #   $a0 += columnIndex
        		mul $t5, $t5, $s3   #   $a0 *= DATA_SIZE
        		add $t5, $t5, $s0   #   $a0 += base address
        		# $t5 now has address of the element at rowIndex $t0 and columnIndex $t1

        		lw $t5, ($t5)
        		bne $t5, $a2, bottomLeftCheckEnd # if player at address != given player, then exit loop
        		addi $t3, $t3, 1 # increment same in a row count
        		beq $t3, $t4, winner	# if same in a row count == win amount, then win

        		j bottomLeftCheck

    		bottomLeftCheckEnd:
    	
    	CheckTie:
    	#set indexes
    	li $t0, 0 # $t0 == rowIndex
    	li $t1, 0 # $t1 == columnIndex

   	 checkTieLoop:
        #   address of element == base address (label) + (rowIndex * colSize + colIndex) * dataSize
        mul $a0, $t0, $s2   #   $a0 = rowIndex * columnSize
        add $a0, $a0, $t1   #   $a0 += columnIndex
        mul $a0, $a0, $s3   #   $a0 *= DATA_SIZE
        add $a0, $a0, $s0   #   $a0 += base address
        #   a0 now has address of the element at rowIndex $t0 and columnIndex $t1

        #If t2 is equal to zero, after all the possible pieces have been examined, then there is no tie
        lw $t2, ($a0)
        beq $t2, $zero, noTie	# if value at address == 0, it is a valid move and we can exit the loop
        
        addi $t1, $t1, 1 # Add one to the column Index
        blt $t1, $s2, checkTieLoop # if column index < 3, repeat loop

        addi $t0, $t0, 1 # Add one to the row Index
        li $t1, 0
        blt  $t0, $s1, checkTieLoop # if rowIndex < 6
    
    	isTie: #Jumps here if no possible moves detected
    	j tie
    
    	noTie:
    		

tie: #Displays tie
	li $v0, 4
	la $a0, newLine
	syscall

	li $v0, 4
	la $a0, gameTie
	syscall
	
	li $v0, 10
	syscall
	
winner: #Displays the winner
	li $t1, 1
	beq $s4, $t1, playerWin
	j AIWin
	
	playerWin:
		li $v0, 4
		la $a0, newLine
		syscall
	
		li $v0, 4
		la $a0, userWin
		syscall
		
		li $v0, 10
		syscall
		
	AIWin:
		li $v0, 4
		la $a0, newLine
		syscall
		
		li $v0, 4
		la $a0, computerWin
		syscall
		
		li $v0, 10
		syscall
	
	