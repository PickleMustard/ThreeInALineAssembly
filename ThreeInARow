#Michael Higley mwh180000
#Dillon Carter	dwc180002
#Three in a row game project made for CS 2340 with Nhut Nguyen
#Registers Used:
#S Registers: s0: Stores 2d Array of board, s1: Stores size of row, s2: Stores size of column
#T Registers: t0: Stores inputted column
#
.data
	#All ASCIIZ values
	newLine:	.asciiz "\n"
	userWin: 	.asciiz "Congratulations, you won the game!"
	computerWin: 	.asciiz "You lost to the computer!"
	gameTie: 	.asciiz "The game has tied."
	movePrompt: 	.asciiz "It is your turn"
	computerTurn: 	.asciiz "The CPU has moved"
	inputPosition: 	.asciiz "Enter a number 1-3 for your move"
	invalidMove: 	.asciiz "That is not a valid column."
	columnFull: 	.asciiz "That column is full now"
	gameExplain: 	.asciiz "This game is called Three in a row. The goal is to get three of your pieces to line up vertically, horizontally, or diagonally. The board is 3x6 and you are up against a CPU. Have fun!."
	stateEmpty:	.asciiz "E"
	stateRed:	.asciiz "R"
	stateBlack:	.asciiz "B"
	
	#Word values
	boardState .word 0,0,0 #Stores the state of each position in the board, 0 for empty, 1 for Play1, 2 for Play 2
		   .word 0,0,0
		   .word 0,0,0
		   .word 0,0,0
		   .word 0,0,0
		   .word 0,0,0
		   
	rowSize:   .word 3
	columnSize:.word 6
.text
main:
	li $v0, 4 #Loading 4 for output
	la $a0, gameExplain #Print the explanation
	syscall
	#Initialize the board
	la $s0, ui2DArray   #load base address of 2D array into register
    	lw $s1, rowSize
    	lw $s2, columnSize
    	
loop: #Start of the input loop
	
	jal displayBoard #Display the current board
	
	la $a0, inputPosition
	syscall 

	li $v0, 5 #Getting ready for user input
	syscall
	
	move $t0, $v0 #Moves input to the temp register 0 
	jal isValid #Testing if the move is valid
	
	
	
isValid: #Tests if the move is invalid
	blt $t0, 1, invalid
	bgt  $t0, 3, invalid

valid: #If the move is valid
	jr $ra

invalid: #If the move is invalid
	lie $v0, 4
	la $a0, invalidMove
	syscall
	j loop

displayBoard: #Takes the content of each position and displays the content whether it is red, black, or empty as R, B, or E
    li	$v0, 1	
    move $a0, $s0 
    syscall

    li	$v0, 4	#syscall to print string
    la	$a0, uiNewLine #loading exitString in argument register to print
    syscall

    li	$v0, 1	
    move $a0, $s1
    syscall

    li	$v0, 4	#syscall to print string
    la	$a0, uiNewLine #loading exitString in argument register to print
    syscall

    li	$v0, 1
    move $a0, $s2
    syscall

    li	$v0, 4	#syscall to print string
    la	$a0, uiNewLine #loading exitString in argument register to print
    syscall

    li	$v0, 1
    move $a0, $s3
    syscall

    li	$v0, 4	#syscall to print string
    la	$a0, uiNewLine #loading exitString in argument register to print
    syscall

    jr $ra